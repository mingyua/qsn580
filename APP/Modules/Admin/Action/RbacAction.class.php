<?php// 本类由系统自动生成，仅供测试用途	class RbacAction extends CommonAction{	//用户列表    public function index(){		$this->role=M('role')->select();				import('Class.Page',APP_PATH);		$count=M('user')->count();		$page=new Page($count,10);		$limit=$page->firstRow.','.$page->listRows;		$this->user=D('UserRelation')->field('password',true)->relation('role')->order('id DESC')->limit($limit)->select();		$this->page=$page->show();		$this->display();    }	//角色列表    public function role(){		import('Class.Page',APP_PATH);		$count=M('role')->count();		$page=new Page($count,9);		$limit=$page->firstRow.','.$page->listRows;		$this->role=M('role')->limit($limit)->select();		$this->page=$page->show();		$this->display();    }	//节点列表    public function node(){		$field=array('id','name','title','pid');		$node=M('node')->order('sort')->select();		$this->node=node_merge($node);		$this->display();    }	//添加用户    public function addUser(){		if(IS_POST){				$user=array(			'username'=>I('username'),			'password'=>I('password','','md5'),			'logintime'=>time(),			'loginip'=>get_client_ip(),		);		$role=array();		if($uid=M('user')->add($user)){			foreach ($_POST['role_id'] as $v){				$role[]=array(					'role_id'=>$v,					'user_id'=>$uid,				);			}			M('role_user')->addAll($role);			$this->success('添加成功',U(GROUP_NAME.'/Rbac/index','',''));			}else{			$this->error('添加失败');								}		}else{		$this->role=M('role')->select();		$this->display();		}	}				//用户资料修改展示页面	Public function edit(){		if(IS_POST){			$user=M('user');			$checkpass=$_POST['checkpass'];			$checkscore=$_POST['checkscore'];			$data=array();			$data['id']=$_POST['id'];			$data['username']=$_POST['username'];			if($checkpass==1){			$data['password']=MD5($_POST['password']);				}else{			$data['password']=$_POST['repassword'];				}			$data['realname']=$_POST['realname'];			$data['sex']	 =$_POST['sex'];			$data['educational']=$_POST['educational'];			$data['tel']=$_POST['tel'];			$data['email']=$_POST['email'];			$data['address']=$_POST['address'];			if($checkscore==1){			$data['score']=$_POST['score'];				}else{			$data['score']=$_POST['rescore'];				}						$data['images']=$_POST['images'];			$data['tip']=$_POST['tip'];			$data['url']=$_POST['url'];			$data['lock']=$_POST['lock'];			$count=$user->save($data);			if($count !==false){				$role=array(					'role_id'=>$_POST['role_id'],					'user_id'=>$_POST['id'],				);				$ru=M('role_user')->where("user_id=$_POST[id]")->find();				if($ru){				M('role_user')->save($role);				}else{					M('role_user')->add($role);					}								$this->success('数据修改成功！');			}else{				$this->error('数据修改失败');					}					}else{		$this->id=I('id',0,'intval');		$id=$_GET['id'];		$user = M("user"); // 实例化User对象		$vuser=$user->where("id=$id")->find();		$this->vuser=$vuser;		$this->userimg=explode('.',$vuser['images']);		$this->role=M('role')->select();		$rid=M("role_user")->where("user_id=$id")->field('role_id')->find(); // 实例化User对象		$roleid=$rid['role_id'][0];		$this->roleid=$rid['role_id'][0];		$rname=M("role");		$group=$rname->where("id=$roleid")->find(); // 实例化User对象		$this->assign('group',$group);		$this->display();		}	}			//用户资料修改处理表单		//添加角色    public function addRole(){		if(IS_POST){			if(M('role')->add($_POST)){				$this->success('添加成功',U(GROUP_NAME.'/Rbac/role'));				}else{					$this->error('添加失败');									}			}else{		    $this->display();		}    }		//添加节点    public function addNode(){		if(IS_POST){			$node=new Model('node');			$data=array();			$data['id']=$_POST['id'];			$data['name']=$_POST['name'];			$data['title']=$_POST['title'];			if($_POST['id']<>0){			$count=$node->save($data);			if($count !==false){				$this->success('数据修改成功！');			}else{				$this->error('数据修改失败');					}			}else{   		if(M('node')->add($_POST)){			$this->success('添加成功');			}else{				$this->error('添加失败');								}			}		}else{		$this->pid=I('pid',0, 'intval');//=$pid=isset($_GET['pid'])? $_GET['pid']: 0;		$this->level=I('level',1, 'intval');				switch($this->level){		  case 1:			$this->type='应用';			break;		  case 2:			$this->type='控制器';			break;		  case 3:			$this->type='动作方法';			break;						}		$this->id=I('id',0, 'intval');		$id=$_GET['id'];		$node = M("node"); // 实例化User对象		$list=$node->where("id=$id")->find();		$this->assign('list',$list);		$this->display();	   }	}	//删除节点	    public function delnode(){		$nodeid = intval($_GET['id']);		$node = M("node"); // 实例化User对象		if($node->where("id=$nodeid")->delete()){					$this->success('节点删除成功!');				}else{					$this->error('节点删除失败!');				}				}				   		//配置权限	public function access(){		if(IS_POST){//修改权限		$rid=I('rid',0,'intval');		$db=M('access');		//清空原权限		$db->where(array('role_id'=>$rid))->delete();		//组合新权限		$data=array();		foreach($_POST['access'] as $v){			$tmp=explode('_',$v);			$data[]=array(				'role_id' =>$rid,				'node_id' =>$tmp[0],				'level' =>$tmp[1],			);		}	//插入新权限			if($db->addAll($data)){				$this->success('修改成功');				}else{				$this->error('修改失败');			}		}else{		$rid=I('rid',0,'intval');		$this->role=M('role')->where("id=$rid")->find();				$field=array('id','name','title','pid');		$node=M('node')->order('sort')->field($field)->select();		//原有权限 		$access=M('access')->where(array('role_id'=>$rid))->getField('node_id',true);		$this->node=node_merge($node,$access);		$this->rid=$rid;		$this->display();		}	}					   		//用户状态	public function rolestate(){			$user=M('user');			$data=array();			$data['id']=$_POST['id'];			$data['lock']=$_POST['lock'];			$data['title']=$_POST['title'];			if($_POST['id']<>0){			$count=$node->save($data);			if($count !==false){				$this->success('数据修改成功！');			}else{				$this->error('数据修改失败');					}			}	}		//上传头像	public function uploadImg(){		import('ORG.UploadFile');		$upload = new UploadFile();						// 实例化上传类		$upload->maxSize = 1*1024*1024;					//设置上传图片的大小		$upload->allowExts = array('jpg','png','gif');	//设置上传图片的后缀		$upload->uploadReplace = true;					//同名则替换		$upload->saveRule = 'uniqid';					//设置上传头像命名规则(临时图片),修改了UploadFile上传类		//完整的头像路径		$path = './avatar/';		$upload->savePath = $path;		if(!$upload->upload()) {						// 上传错误提示错误信息			$this->ajaxReturn('',$upload->getErrorMsg(),0,'json');		}else{											// 上传成功 获取上传文件信息			$info =  $upload->getUploadFileInfo();			$temp_size = getimagesize($path.$info['0']['savename']);			if($temp_size[0] < 100 || $temp_size[1] < 100){//判断宽和高是否符合头像要求				$this->ajaxReturn(0,'图片宽或高不得小于100px！',0,'json');			}			$data['picName'] = $info['0']['savename'];			$data['status'] = 1;			$data['url'] = __ROOT__.'/avatar/'.$data['picName'];			$data['info'] = $info;			$this->ajaxReturn($data,'json');		}	}	//裁剪并保存用户头像	public function cropImg(){		//图片裁剪数据		$params = $this->_post();		//裁剪参数		if(!isset($params) && empty($params)){			return;		}		$user=M('user');		$data=array();		$data['id']=$params['id'];		$data['images']=$params['picName'];				$count=$user->save($data);		//头像目录地址		$path = './avatar/';		//要保存的图片		$real_path = $path.$params['picName'];		//临时图片地址		$name=explode('.',$params['picName']);		$pic_path = $path.$params['picName'];		import('ORG.ThinkImage.ThinkImage');		$Think_img = new ThinkImage(THINKIMAGE_GD); 		//裁剪原图		$Think_img->open($pic_path)->crop($params['w'],$params['h'],$params['x'],$params['y'])->save($real_path);		//生成缩略图		$Think_img->open($real_path)->thumb(100,100, 1)->save($path.$name[0].'_100.jpg');		$Think_img->open($real_path)->thumb(60,60, 1)->save($path.$name[0].'_60.jpg');		$Think_img->open($real_path)->thumb(30,30, 1)->save($path.$name[0].'_30.jpg');		$this->success('上传头像成功');	}	//文章列表删除操作	Public function userdel(){		$id = intval($_GET['id']);		$user = M('user'); // 实例化User对象		$del=$user->where("id='$id'")->delete();		if($del){			echo 1;		}else{			echo 0;			}				}	Public function roledel(){		$id = intval($_GET['id']);		$role = M("role"); // 实例化User对象		if($role->where("id='$id'")->delete()){			echo 1;		}else{			echo 0;			}				}	//用户锁定状态设置	Public function locks(){		$id = intval($_GET['id']);		$user = M("user"); // 实例化User对象		$zt=$user->where("id=$id")->find();		if($zt['lock']==1){		$data['lock'] =0;		}else{		$data['lock'] =1;		}		$user->where("id=$id")->save($data);			}	Public function status(){		$id=$_POST['id'];		$user = M("user"); // 实例化User对象		$zt=$user->where("id='$id'")->find();		if($zt['lock']==1){		$data['lock'] =0;		}else{		$data['lock'] =1;		}		$user->where("id='$id'")->save($data);		if($user){			echo 1;		}else{			echo 0;		}	}	Public function chong(){		if(IS_POST){			$user = M("user");			$id=$_POST['id'];			$oldcash=$user->where("id='$id'")->find();			$score=intval($oldcash['score'])+intval($_POST['newcash']);			$data=array('id'=>$id,'score'=>$score);			$updata=$user->save($data);			if($updata){				$cash=M('cash');				$arr=array(					'paytype'=>0,					'uid'=>$id,					'nowcash'=>$_POST['newcash'],					'info'=>'系统充值保证金',					'del'=>0,					'time'=>time(),				);				$cash->add($arr);								$this->success('充值成功');			}else{				$this->error('充值失败！');			}		}else{		$id = intval($_GET['id']);		$user = M("user"); // 实例化User对象		$this->chong=$user->where("id='$id'")->find();		$this->display();		}	}						}